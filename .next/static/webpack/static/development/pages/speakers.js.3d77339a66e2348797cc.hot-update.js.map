{"version":3,"file":"static/webpack/static\\development\\pages\\speakers.js.3d77339a66e2348797cc.hot-update.js","sources":["webpack:///./pages/speakers.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport SpeakerCard from \"../src/SpeakerCard\";\r\n\r\nimport getConfig from 'next/config';\r\nconst {serverRuntimeConfig, publicRuntimeConfig} = getConfig();\r\n\r\nclass Speakers extends React.Component {\r\n\r\n    static GetSpeakersUrl() {\r\n        if (process.env.NODE_ENV === \"production\") {\r\n            return process.env.RESTURL_SPEAKERS_PROD\r\n                || publicRuntimeConfig.RESTURL_SPEAKERS_PROD;\r\n        } else {\r\n            return process.env.RESTURL_SPEAKERS_DEV;\r\n        }\r\n    }\r\n    static async getInitialProps({req}) {\r\n        const isServer = !!req;\r\n        if (isServer) {\r\n            var promise = axios.get(Speakers.GetSpeakersUrl()).then(response => {\r\n                return {\r\n                    isLoading: false,\r\n                    hasErrored: false,\r\n                    speakerData: response.data\r\n                };\r\n            })\r\n                .catch(error => {\r\n                    return {\r\n                        hasErrored: true,\r\n                        message: error.message\r\n                    }\r\n                });\r\n            return promise;\r\n        } else {\r\n\r\n            return {\r\n                speakerData: [...Array(5)].map((_, i) => ({\r\n                    firstName: \"\",\r\n                    lastName: \"\",\r\n                    id: i\r\n                })),\r\n                isLoading: true\r\n            };\r\n\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: props.isLoading,\r\n            hasErrored: props.hasErrored,\r\n            message: props.message,\r\n            speakerData: props.speakerData\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(Speakers.GetSpeakersUrl())\r\n            .then((response) => {\r\n                this.setState({\r\n                    hasErrored: false,\r\n                    isLoading: false,\r\n                    speakerData: response.data\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    hasErrored: true,\r\n                    isLoading: false,\r\n                    speakerData: []\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"card-deck\">\r\n                        {this.state.speakerData}\r\n                        {/* {this.state.speakerData.map((speaker) =>\r\n                            <div className=\"card col-4 cardmin margintopbottom20\" key={speaker.id}>\r\n                                <SpeakerCard isLoading={this.state.isLoading} speaker={speaker}/>\r\n                            </div>\r\n                        )} */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Speakers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;AAEA;AACA,mBAGA;AACA;AACA;AACA;;;;;;;;;;;;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AANA;AACA;;;;;;;;;;;;;;;;;AAWA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAWA;;;;AArFA;AACA;AAwFA;;;;;A","sourceRoot":""}